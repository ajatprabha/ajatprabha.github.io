<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2018-05-29T15:03:04+00:00</updated><id>/</id><title type="html">Ajat Prabha</title><subtitle>Blog</subtitle><entry><title type="html">Week 1 - Experience as an intern at GoJek</title><link href="/2018/05/27/first-week-at-gojek-bangalore" rel="alternate" type="text/html" title="Week 1 - Experience as an intern at GoJek" /><published>2018-05-27T18:00:00+00:00</published><updated>2018-05-27T18:00:00+00:00</updated><id>/2018/05/27/first-week-at-gojek-bangalore</id><content type="html" xml:base="/2018/05/27/first-week-at-gojek-bangalore">&lt;blockquote&gt;
  &lt;p&gt;It began, the week I‚Äôve been waiting for since months! I was finally interning with GoJek in Bangalore.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before I go on and talk about my experience with GoJek and the internship, I wrote about how I got it in the first place. Read it &lt;a href=&quot;/2018/05/27/how-i-got-the-internship-at-gojek&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;20&lt;sup&gt;th&lt;/sup&gt; May it was, I had packed my bags and was ready to leave for the airport. A quick check of the things I need to carry and the next moment I was driving.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/IMG_20180520_061439.jpg&quot; alt=&quot;Car&quot; style=&quot;max-width: 400px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I reached the airport at around 0800 hours and my flight landed in Bangalore at around 1400 hours. I arrived at accommodation provided by GoJek and it was far better than my expectations. It was a fully furnished 3 BHK apartment. And the view outside the balcony was jaw-dropping. Just look at the image below!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/IMG_20180520_154815.jpg&quot; alt=&quot;Diamond district balcony&quot; style=&quot;max-width: 512px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I did nothing that day except unpack my bag and I was so tired that I went to straight to take a nap. When I woke up I got a treat by my seniors.üòÅ&lt;/p&gt;

&lt;h3 id=&quot;day-1&quot;&gt;Day 1&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/IMG_20180528_084023.jpg&quot; alt=&quot;GoJek office&quot; style=&quot;max-width: 720px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next day at 1100 hours I was in the GoJek office waiting with fellow interns for the HR person to brief us. The first thing that she said was that the guys are bringing your laptops shortly and we were asked to fill-up the NDA. And there it was, a 15‚Äù MacBook Pro with maxed out specs and the awesome touch bar. üòç&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/IMG_20180521_122110.jpg&quot; alt=&quot;MacBook&quot; style=&quot;max-width: 600px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I went ahead and got the initial setup done. I had used my friends MacBook Air before so I knew about &lt;code class=&quot;highlighter-rouge&quot;&gt;brew&lt;/code&gt; and installed it. But then I came to know that there is something called &lt;code class=&quot;highlighter-rouge&quot;&gt;brew cask&lt;/code&gt; also. And then I was assigned to a team along with Rajat Mangla and Venkata Sainath Thota. Deepesh Naini is our team leader, he briefed us about GoJek and answered our doubts.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;One thing different from most other offices is the culture here at GoJek. One can be comfortable in their own clothing style. And anyone can go grab snacks, coffee, soft drinks, etc. anytime they want. And there is a recreation room too with pool table, PS4, table-tennis table, etc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;margin-bottom: 3rem;&quot;&gt;&lt;img src=&quot;/assets/images/IMG_20180521_184842.jpg&quot; alt=&quot;Dining area&quot; style=&quot;width: 50%; display: inline-block; padding: 0.8rem;&quot; /&gt;&lt;img src=&quot;/assets/images/IMG_20180521_182624.jpg&quot; alt=&quot;Dining area&quot; style=&quot;width: 50%; display: inline-block; padding: 0.8rem;&quot; /&gt;&lt;img src=&quot;/assets/images/IMG_20180528_084051.jpg&quot; alt=&quot;Recreation room&quot; style=&quot;max-width: 98%; margin: 0.5em auto;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;We then met Aayush, he showed us our desk and we continued the process of setting up our machines. I finished the setup and asked Aayush what to do next? He gave the three of us access to one of the repositories which are a part of the Go-Food platform. I had to go through it and understand the project structure, it was built on top of &lt;code class=&quot;highlighter-rouge&quot;&gt;Ruby On Rails&lt;/code&gt;. The syntax was new to me but since I had worked previously on &lt;code class=&quot;highlighter-rouge&quot;&gt;Django&lt;/code&gt; so I was aware of MVC architecture and my blog is built using &lt;code class=&quot;highlighter-rouge&quot;&gt;Jekyll&lt;/code&gt; so I knew a little about Ruby‚Äôs project structure and bundler, etc.&lt;/p&gt;

&lt;p&gt;But obviously, the project wasn‚Äôt completely clear to me. The next step was to question everything! What is this? Why is this so? etc. Aayush asked us every possible question. I could answer only a few, in others, I was confused or simply didn‚Äôt have the answer.&lt;/p&gt;

&lt;p&gt;I learned quite a lot during the next three days. &lt;code class=&quot;highlighter-rouge&quot;&gt;RSpec&lt;/code&gt; was completely new to me, I was aware of &lt;a href=&quot;/2017/12/20/tdd-why-bother&quot;&gt;TDD&lt;/a&gt; but RSpec introduced me to BDD. After the initial three days of learning &lt;code class=&quot;highlighter-rouge&quot;&gt;Ruby&lt;/code&gt;, we were given a project which was to be done in &lt;code class=&quot;highlighter-rouge&quot;&gt;Go&lt;/code&gt; and will involve creating an API for image manipulation. I again looked at the repository for the new project and tried to build it. I went through the code and then paired with Rajat and Sainath to write our first piece of code as an intern. We pushed the code to the remote server and created a merge request. And yes, having an external monitor while coding is a bliss. üôÉ&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/IMG_20180525_184345_blur.jpg&quot; alt=&quot;GitLab&quot; style=&quot;max-width: 720px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The learning experience has been great so far and there is so much more to explore. I‚Äôm meeting new people, many more yet to meet.üòÖ I‚Äôve made new friends, all of them are great. I‚Äôm liking Bangalore so far, especially the weather. It‚Äôs been raining almost every day since I‚Äôve arrived. I went to my cousin‚Äôs home for the weekend and this is pretty much it about the first week.&lt;/p&gt;</content><author><name>ajatprabha</name></author><category term="gojek" /><category term="internship" /><category term="travel" /><summary type="html">It began, the week I‚Äôve been waiting for since months! I was finally interning with GoJek in Bangalore.</summary></entry><entry><title type="html">How I got the internship at GoJek</title><link href="/2018/05/27/how-i-got-the-internship-at-gojek" rel="alternate" type="text/html" title="How I got the internship at GoJek" /><published>2018-05-27T16:00:00+00:00</published><updated>2018-05-27T16:00:00+00:00</updated><id>/2018/05/27/how-i-got-the-internship-at-gojek</id><content type="html" xml:base="/2018/05/27/how-i-got-the-internship-at-gojek">&lt;p&gt;It was October of 2017 I guess and campus interviews for internships were going on and I could easily spot my seniors wearing formals inside the campus. And believe me, I couldn‚Äôt even recognize one of the seniors whom I already knew üòõ. One morning I asked my batch-mate that I wanna see the interview process! He was a volunteer in Student Placement Cell. He said, no problem, come with me tonight.&lt;/p&gt;

&lt;p&gt;I went and it was GoJek taking the coding round. I saw a familiar face, Aayush Sharda he was, one of my seniors from &lt;code class=&quot;highlighter-rouge&quot;&gt;Defeat The Beat&lt;/code&gt;, our dance club. Abhinav Rai, another of my seniors was also there. Abhinav asked me to take the question paper and do it in 1 hour üòÇ. It was meant to be done in 3 hours though. I read the problem statement, it didn‚Äôt seem that difficult to me, I skipped it anyway üòÖ.&lt;/p&gt;

&lt;p&gt;After the coding round was over I asked Aayush that what do they look for while examining the candidates. He replied, we look at various aspects like how do they name variables, how do they react to input while pair programming, what is their coding style, are they focusing on getting shit done or spending their time in optimizing it, etc. to name a few. It was surprising but only 1 person was able to finish all the milestones of the problem statement. Why? Because most of the people were stuck at optimizing the first milestone! üòÖ&lt;/p&gt;

&lt;p&gt;After listening to all this, I decided to show the repository of one of my projects I did that summer to him. He asked me to send the link. Later that night, I received a call from him and he asked me to come over to the guest house where he was staying. He asked me questions which were a little out of context to me at first but he was just making sure that I actually wrote the code. üòÖ&lt;/p&gt;

&lt;p&gt;For the next half an hour he was just telling me about what GoJek is and what does it do. And then came the question, ‚ÄúTu GoJek k saath internship karega?‚Äù like if I would say no! Hell yeah, who would deny an internship in a unicorn. üòÖ&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2b354w.jpg&quot; alt=&quot;hell yeah meme&quot; style=&quot;max-width: 400px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;He then asked me to brush up all the things that I‚Äôve used in that project because next afternoon was my interview scheduled. I barely slept that night and I went through almost everything I had used to code that project be it Git, MVC, OOP concepts or Django‚Äôs ORM. I read everything! Next day I attended all my classes and it was time for the interview. I was nervous that I shouldn‚Äôt blow up this opportunity.&lt;/p&gt;

&lt;p&gt;I called Aayush and he was not gonna be a part of the interview. I was in the guest house now. I was so consumed by many things that I don‚Äôt even remember now who opened the door for me and asked me to have a seat. üòÇ&lt;/p&gt;

&lt;p&gt;A few minutes later I was joined by Puneet Goyal and Shishir Joshi. The two were very casual, probably to make me comfortable. The interview started and both of them told me about themselves one after the other like what do they do, briefly about their journey in the tech world so far. And next was me! The questions were mostly about how I was motivated to do that project? Why did I choose Django? How did I cope with problems I had while working on the project? etc.&lt;/p&gt;

&lt;p&gt;There were no hard-core coding questions or questions about data structures and algorithms, etc. maybe because I was a sophomore back then and the course was still ongoing. The interview came to an end and we shook hands and Puneet told me that he‚Äôll let me know if we can work on a project together and hack something cool. I left the guest house and while my way back to the hostel room I was thinking, ‚ÄúI messed it up‚Äù because there was no code-related questions. üòÖ&lt;/p&gt;

&lt;p&gt;I messaged Aayush that I think I blew up. He replied that everything was great and he‚Äôll convey the details later and I was not supposed to tell anyone yet. I was still not believing all the things that happened and moved on.&lt;/p&gt;

&lt;p&gt;2 days later Ashish Sahu, a senior congratulated me! I was like, for what exactly? He said, ‚ÄúAbhinav ne nahi btaya kya?‚Äù. I messaged Abhinav about it. He laughed and said, ‚ÄúRoom par aake t-shirt le jana‚Äù üòÇ. Now I believed that yes I made it through. I thanked Aayush for the opportunity and asked if I can tell my parents now, ‚Äúbata de or t-shirt pehen ke ghoom‚Äù, he said.&lt;/p&gt;

&lt;p&gt;So this is how I got the internship. This was primarily because I was at the right place at the right time. Hadn‚Äôt I went to see the interview process, I probably wouldn‚Äôt get this opportunity. Thanks to Kuldeep and Nikhil!&lt;/p&gt;

&lt;p&gt;The next 1-2 days went coping with memes that my &lt;code class=&quot;highlighter-rouge&quot;&gt;jigri dost&lt;/code&gt; were targeting at me.&lt;/p&gt;

&lt;p&gt;Do read my first week‚Äôs experience &lt;a href=&quot;/2018/05/27/first-week-at-gojek-bangalore&quot;&gt;here&lt;/a&gt;&lt;/p&gt;</content><author><name>ajatprabha</name></author><category term="gojek" /><category term="internship" /><summary type="html">It was October of 2017 I guess and campus interviews for internships were going on and I could easily spot my seniors wearing formals inside the campus. And believe me, I couldn‚Äôt even recognize one of the seniors whom I already knew üòõ. One morning I asked my batch-mate that I wanna see the interview process! He was a volunteer in Student Placement Cell. He said, no problem, come with me tonight.</summary></entry><entry><title type="html">TDD (Test Driven Development), why bother?</title><link href="/2017/12/20/tdd-why-bother" rel="alternate" type="text/html" title="TDD (Test Driven Development), why bother?" /><published>2017-12-20T17:24:00+00:00</published><updated>2017-12-20T17:24:00+00:00</updated><id>/2017/12/20/tdd-why-bother</id><content type="html" xml:base="/2017/12/20/tdd-why-bother">&lt;p&gt;Recently I came to know about TDD (Test Driven Development), a development methodology in &lt;a href=&quot;/2017/12/12/sdlc-waterfall-vs-agile&quot;&gt;Agile Software Craftsmanship&lt;/a&gt;. At first, I was not even sure that how can we write tests to detect bugs in the code, because we write very specific tests that don‚Äôt cover every possible use-case. I didn‚Äôt understand the purpose of such tests at all. But then digging more into the topic I discovered what is the utility of these tests which I‚Äôm going to share in this article.&lt;/p&gt;

&lt;h2 id=&quot;what-is-tdd&quot;&gt;What is TDD?&lt;/h2&gt;

&lt;p&gt;You already know the full-form of TDD. Now, TDD is a process that is used to create software¬†with very small repetitive cycles which include: analysis of the requirement, converting that requirement into a very specific test case which shall fail, then we write the production code to make the test pass, we refactor the code and then again repeat the cycle with new requirement. After each cycle, all the tests must pass. We‚Äôre not that great at coming up with a code that has correct behaviour and correct structure simultaneously. To overcome this, we follow the RGR cycle in TDD, while always keeping the three laws of TDD in mind.&lt;/p&gt;

&lt;h2 id=&quot;the-three-laws-of-tdd&quot;&gt;The Three Laws of TDD&lt;/h2&gt;

&lt;p&gt;These laws lock a developer into a cycle that is short but is very crucial to maintain. They are:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;You may not write production code until you have written a failing unit test.&lt;/li&gt;
    &lt;li&gt;You may not write more of a unit test that is sufficient to fail, and not compiling is failing.&lt;/li&gt;
    &lt;li&gt;You may not write more production code that is sufficient to pass the currently failing test.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;The purpose of these laws is just to provide line-by-line granularity to the code. Almost every second you keep these laws into consideration.&lt;/p&gt;

&lt;h2 id=&quot;rgr-cycle&quot;&gt;RGR Cycle&lt;/h2&gt;

&lt;p&gt;Red-Green-Refactor cycle is repeated after every complete unit test or after a¬†couple of the three laws cycles. They are:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Write a failing unit test&lt;/li&gt;
    &lt;li&gt;Write production code that makes the unit test pass, by any means necessary&lt;/li&gt;
    &lt;li&gt;Clean up the mess, i.e. refactor the code&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/RGR-cycle-300x300.png&quot; alt=&quot;RGR
Cycle
Infographic&quot; /&gt;&lt;br /&gt;
Source: Self-created.&lt;/p&gt;

&lt;p&gt;Purpose of RGR cycle is to write clean code subject to constraints. As you write unit tests, you specify the behaviour of the software. And then you write production code which is constrained¬†by the unit tests, so you can structure your production code while maintaining the behaviour of the software. Refactoring is done after each cycle, it is not to be left after the end of the project. It is this cycle that makes it easy to make changes in the code at any stage a lot easier while still maintaining the behaviour required.&lt;/p&gt;

&lt;h2 id=&quot;specificgeneric-cycle&quot;&gt;Specific/Generic Cycle&lt;/h2&gt;

&lt;p&gt;This cycle is observed after every 10-15 minutes. It tells you that&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As the tests get more specific, the production code gets more generic.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We‚Äôll understand soon what this means with the help of an example. But in a nutshell, when you add even finer granularity to the unit tests, you should write more generalised production code to make the test pass.&lt;/p&gt;

&lt;h4 id=&quot;now-lets-take-the-example-of-building-a-stack-class-using-tdd&quot;&gt;Now let‚Äôs take the example of building a stack class using TDD.&lt;/h4&gt;

&lt;p&gt;I‚Äôll use python in this example. Under a directory, I created two files viz. &lt;code class=&quot;highlighter-rouge&quot;&gt;stack.py&lt;/code&gt;¬†and &lt;code class=&quot;highlighter-rouge&quot;&gt;test_stack.py&lt;/code&gt;¬†:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;stack.py&lt;/code&gt;¬†contains the production code and the class &lt;code class=&quot;highlighter-rouge&quot;&gt;Stack&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;test_stack.py&lt;/code&gt; contains unit tests and the class &lt;code class=&quot;highlighter-rouge&quot;&gt;TestStack&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So let‚Äôs say the very first test is that the size of a new stack should be zero. Note that tests in python should be prefixed with &lt;code class=&quot;highlighter-rouge&quot;&gt;test_&lt;/code&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/b2f80bc33796ed79fe7c79879d508b82.js?file=base-test-stack.py&quot;&gt; &lt;/script&gt;

&lt;p&gt;Create an interface method like this.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/b2f80bc33796ed79fe7c79879d508b82.js?file=base-stack.py&quot;&gt; &lt;/script&gt;

&lt;p&gt;Now, run the automated tests provided by &lt;code class=&quot;highlighter-rouge&quot;&gt;unittest&lt;/code&gt;¬†module in python by command &lt;code class=&quot;highlighter-rouge&quot;&gt;python -m unittest&lt;/code&gt;. Let me make the test fail by returning a value -1&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/b2f80bc33796ed79fe7c79879d508b82.js?file=stack-size-fail.py&quot;&gt; &lt;/script&gt;

&lt;p&gt;I can make this test pass simply by returning the desired value 0, recall point 2 of RGR cycle.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/b2f80bc33796ed79fe7c79879d508b82.js?file=stack-size-pass.py&quot;&gt; &lt;/script&gt;

&lt;h4 id=&quot;stack-size-after-push-is-one&quot;&gt;Stack size after push is one&lt;/h4&gt;

&lt;p&gt;Let me write another test which checks if the size of the stack is 1 or not after one push.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/b2f80bc33796ed79fe7c79879d508b82.js?file=test-one-push-stack.py&quot;&gt; &lt;/script&gt;

&lt;p&gt;Let‚Äôs make the test pass by simply incrementing the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;_size&lt;/code&gt;¬†in &lt;code class=&quot;highlighter-rouge&quot;&gt;.push()&lt;/code&gt;¬†method and return that variable in &lt;code class=&quot;highlighter-rouge&quot;&gt;.size()&lt;/code&gt;¬†method.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/b2f80bc33796ed79fe7c79879d508b82.js?file=one-push-stack.py&quot;&gt; &lt;/script&gt;

&lt;p&gt;Take a moment and notice that I replaced a constant value with a more generic variable. Also, I need to &lt;strong&gt;refactor&lt;/strong&gt; the code now as I‚Äôve duplicated code in both the tests. I can do this by moving the stack initialisation part in &lt;code class=&quot;highlighter-rouge&quot;&gt;setUp&lt;/code&gt;¬†method of the class &lt;code class=&quot;highlighter-rouge&quot;&gt;TestStack&lt;/code&gt;, this method is called before running every test in the class.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/b2f80bc33796ed79fe7c79879d508b82.js?file=refactor-duplicate-code.py&quot;&gt; &lt;/script&gt;

&lt;h4 id=&quot;stack-size-is-zero-after-a-push-and-a-pop&quot;&gt;Stack size is zero after a push and a pop&lt;/h4&gt;

&lt;p&gt;If I push an element and then pop it, the size should be zero after that.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/b2f80bc33796ed79fe7c79879d508b82.js?file=stack-size-fail.py&quot;&gt; &lt;/script&gt;

&lt;p&gt;Make this test pass by simply decrementing the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;_size&lt;/code&gt;.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/b2f80bc33796ed79fe7c79879d508b82.js?file=push-pop-stack.py&quot;&gt; &lt;/script&gt;

&lt;h4 id=&quot;stack-raises-underflow-error&quot;&gt;Stack raises underflow error&lt;/h4&gt;

&lt;p&gt;What if the stack is empty and I try to pop a non-existing element? Yes, it should raise an error.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/b2f80bc33796ed79fe7c79879d508b82.js?file=test-underflow-pop-stack.py&quot;&gt; &lt;/script&gt;

&lt;p&gt;I write the following production code to make this pass by checking for the size equal to zero.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/b2f80bc33796ed79fe7c79879d508b82.js?file=underflow-stack.py&quot;&gt; &lt;/script&gt;

&lt;h4 id=&quot;stack-raises-overflow-error&quot;&gt;Stack raises overflow error&lt;/h4&gt;

&lt;p&gt;Great going till now, but what if the stack has a specific capacity and I can‚Äôt exceed its maximum capacity? I write another test just to check that and it should raise &lt;code class=&quot;highlighter-rouge&quot;&gt;OverFlowError&lt;/code&gt;¬†if pushed on a full stack.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/b2f80bc33796ed79fe7c79879d508b82.js?file=test-overflow-stack.py&quot;&gt; &lt;/script&gt;

&lt;p&gt;Again, I‚Äôm introducing a variable &lt;code class=&quot;highlighter-rouge&quot;&gt;_capacity&lt;/code&gt;¬†in the constructor and I‚Äôll check for it when I push on the stack.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/b2f80bc33796ed79fe7c79879d508b82.js?file=overflow-stack.py&quot;&gt; &lt;/script&gt;

&lt;h4 id=&quot;pop-last-element-pushed-into-stack&quot;&gt;Pop last element pushed into stack&lt;/h4&gt;

&lt;p&gt;Okay, till now every test is passing. But this stack is nowhere close to the actual definition of a stack. So, let me test if zero is popped when I had pushed it before.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/b2f80bc33796ed79fe7c79879d508b82.js?file=test-pop-zero-when-pushed-zero.py&quot;&gt; &lt;/script&gt;

&lt;p&gt;This test will pass by simply returning 0. Note the point 3 of TDD laws here.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/b2f80bc33796ed79fe7c79879d508b82.js?file=stack-pop-zero-when-pushed-zero.py&quot;&gt; &lt;/script&gt;

&lt;p&gt;But what if a more general number, say 1 is pushed? It should return it when popped. I‚Äôll write a test just for that now.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/b2f80bc33796ed79fe7c79879d508b82.js?file=test-pop-one-when-pushed-one.py&quot;&gt; &lt;/script&gt;

&lt;p&gt;I‚Äôll create a private variable &lt;code class=&quot;highlighter-rouge&quot;&gt;_element&lt;/code&gt;¬†and update it in &lt;code class=&quot;highlighter-rouge&quot;&gt;.push()&lt;/code&gt;¬†method and return it when popped.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/b2f80bc33796ed79fe7c79879d508b82.js?file=stack-pop-one-when-pushed-one.py&quot;&gt; &lt;/script&gt;

&lt;h4 id=&quot;true-lifo-operation&quot;&gt;True LIFO operation&lt;/h4&gt;

&lt;p&gt;Once again notice that I replaced the constant 0 with a more generic variable &lt;code class=&quot;highlighter-rouge&quot;&gt;_element&lt;/code&gt;.¬†But now, let‚Äôs make this Stack class really perform the Last-In-First-Out operations.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/b2f80bc33796ed79fe7c79879d508b82.js?file=test-lifo-operation.py&quot;&gt; &lt;/script&gt;

&lt;p&gt;I will now modify the production code in the following way to make the test pass.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/b2f80bc33796ed79fe7c79879d508b82.js?file=lifo-stack.py&quot;&gt; &lt;/script&gt;

&lt;p&gt;Did you notice what happened? I modified &lt;code class=&quot;highlighter-rouge&quot;&gt;_element&lt;/code&gt;¬†variable into a more general data type, an array. Now recall Specific/Generic cycle, as the unit tests become more specific, the production code gets more generic. I hope you understand now what was meant before. Also, the three laws were followed at every step of the cycles, recall that I returned a constant 0 to make the test¬†&lt;code class=&quot;highlighter-rouge&quot;&gt;test_size_is_zero_ after_push_and_pop&lt;/code&gt; pass. I didn‚Äôt generalise it by returning a variable right away. I just somehow made the test pass, that‚Äôs it. Finally, I can again &lt;strong&gt;refactor&lt;/strong&gt; the code and since python provides some shortcuts with arrays, I can get rid of &lt;code class=&quot;highlighter-rouge&quot;&gt;_size&lt;/code&gt;¬†variable and all the unit tests still pass.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/b2f80bc33796ed79fe7c79879d508b82.js?file=refactor-lifo-stack.py&quot;&gt; &lt;/script&gt;

&lt;p&gt;In other languages like C++, you‚Äôll not get rid of &lt;code class=&quot;highlighter-rouge&quot;&gt;_size&lt;/code&gt;¬†and instead, can use it as an array index. In this way, even the initial code that I wrote is not a waste of time. I‚Äôm simply modifying the existing at every cycle and making sure the tests pass. None of the code that we write to pass the early tests is wasted code. It‚Äôs just incomplete and not generalised enough. After every cycle, the code evolves and becomes more general.&lt;/p&gt;

&lt;h4 id=&quot;references&quot;&gt;References:&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.cleancoder.com/uncle-bob/2014/12/17/TheCyclesOfTDD.html&quot;&gt;The Clean Code Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Book: &lt;a href=&quot;https://books.google.co.in/books?isbn=0132350882&quot;&gt;Clean Code&lt;/a&gt; by Robert C. Martin&lt;/li&gt;
&lt;/ol&gt;</content><author><name>ajatprabha</name></author><category term="tdd" /><summary type="html">Recently I came to know about TDD (Test Driven Development), a development methodology in Agile Software Craftsmanship. At first, I was not even sure that how can we write tests to detect bugs in the code, because we write very specific tests that don‚Äôt cover every possible use-case. I didn‚Äôt understand the purpose of such tests at all. But then digging more into the topic I discovered what is the utility of these tests which I‚Äôm going to share in this article.</summary></entry><entry><title type="html">Getting to know SDLC | Waterfall vs Agile Development</title><link href="/2017/12/12/sdlc-waterfall-vs-agile" rel="alternate" type="text/html" title="Getting to know SDLC | Waterfall vs Agile Development" /><published>2017-12-12T17:49:00+00:00</published><updated>2017-12-12T17:49:00+00:00</updated><id>/2017/12/12/sdlc-waterfall-vs-agile</id><content type="html" xml:base="/2017/12/12/sdlc-waterfall-vs-agile">&lt;p&gt;I was always curious to know, how a professional business software is developed from start to finish. Unlike what we do during our study of software designing or developing a hobby project, we don‚Äôt take the steps involved in making a professional software that seriously! But when you‚Äôre out there in the real world you can‚Äôt afford to mess things up due to the lack of a streamlined workflow. So while searching for a tested methodology for software¬†development, I came across something called SDLC aka ‚ÄòSoftware Development Life Cycle‚Äô. It essentially used to describe the various processes involved in the development of a software viz.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Requirement Analysis&lt;/li&gt;
  &lt;li&gt;Design&lt;/li&gt;
  &lt;li&gt;Development&lt;/li&gt;
  &lt;li&gt;Testing&lt;/li&gt;
  &lt;li&gt;Deployment&lt;/li&gt;
  &lt;li&gt;Maintainance&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/SDLC-932x1024.png&quot; alt=&quot;SDLC flow model&quot; style=&quot;max-width: 400px;&quot; /&gt;&lt;br /&gt;
Source: Self-created&lt;/p&gt;

&lt;h4 id=&quot;requirement-analysis&quot;&gt;Requirement Analysis&lt;/h4&gt;

&lt;p&gt;This is the first step of SDLC in which the Product/Software owner analyses the problem at hand and the requirements needed to solve it, the features needed to be fulfilled by the end product. The analyst shall also look at the feasibility of the features in terms of Operational, Economical, Technical and Legal situations. The problem is then broken down into smaller requirements to simplify the goals that need to be achieved. Once this is done, the process moves to the next step.&lt;/p&gt;

&lt;h4 id=&quot;design&quot;&gt;Design&lt;/h4&gt;

&lt;p&gt;When all the features requirements and goals are documented, then a team of developers decides and describes various aspects of the software design viz.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Business requirements and rules&lt;/li&gt;
  &lt;li&gt;Functional and operational requirements&lt;/li&gt;
  &lt;li&gt;Various diagrams such as process diagrams, activity diagrams, class diagrams, use-case diagrams, etc. [See &lt;a href=&quot;https://en.wikipedia.org/wiki/Unified_Modeling_Language&quot;&gt;UML&lt;/a&gt;]&lt;/li&gt;
  &lt;li&gt;Choosing the languages/tools on which the system should be built&lt;/li&gt;
  &lt;li&gt;UI/UX designing, etc&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The end result of this stage will result in a well-documented requirement of modules¬†and/or subsystems upon which the next step will continue.&lt;/p&gt;

&lt;h4 id=&quot;development&quot;&gt;Development&lt;/h4&gt;

&lt;p&gt;This is the step where all the documented requirements are converted into actual code. Several developers work on their assigned features on their own development environments. Once they complete their work, it is merged using &lt;a href=&quot;https://en.wikipedia.org/wiki/Version_control&quot;&gt;VCS&lt;/a&gt; and then it moves to the next step.&lt;/p&gt;

&lt;h4 id=&quot;testing&quot;&gt;Testing&lt;/h4&gt;

&lt;p&gt;This is one of the most important steps of SDLC. During the past 2-3 decades, testing has become very important in SDLC. To simply put it:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;No Tests, No Deployment&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once the code is developed, then various types of tests are written and run on the code to find bugs and reassure the functioning of the software. It also helps in future quality assurance when refactoring is done, or a new feature is added, or an old one is removed. Tests will make sure that you don‚Äôt violate the contract that a function is bound to fulfil. There are &lt;a href=&quot;/2017/12/20/tdd-why-bother&quot;&gt;unit tests&lt;/a&gt;, integration tests, automation tests, and performance tests, to name a few.&lt;/p&gt;

&lt;h4 id=&quot;deployment&quot;&gt;Deployment&lt;/h4&gt;

&lt;p&gt;Once testing is done and the quality is assured, then the software/product is deployed on a physical machine. This machine can be either a dedicated enterprise machine, say a¬†data-centre or a client‚Äôs own machine.&lt;/p&gt;

&lt;h4 id=&quot;maintenance&quot;&gt;Maintenance&lt;/h4&gt;

&lt;p&gt;Finally, the last step kicks in. In this, once deployed, the product is constantly reviewed for any bugs and other issues, if it can troubleshoot easily, then it‚Äôs okay otherwise it moves back again to Design step and the cycle is repeated. Now that we know what an SDLC is, let us discuss the SDLC models!&lt;/p&gt;

&lt;h2 id=&quot;sdlc-models&quot;&gt;SDLC Models&lt;/h2&gt;

&lt;p&gt;An SDLC model is used to describe the various steps involved based on the requirements of software, deadlines, quality, the speed of development, etc. While there are several models in SDLC viz. Waterfall, Spiral, Rapid-prototyping, etc. We‚Äôll be looking only for Waterfall and Agile Development today.&lt;/p&gt;

&lt;h2 id=&quot;1-waterfall&quot;&gt;1. Waterfall&lt;/h2&gt;

&lt;p&gt;This model is basically a linear sequential approach to all the steps involved in SDLC. It‚Äôs very easy to understand and implement. It‚Äôs done in ‚Äòstages‚Äô from start to finish before a next stage can be started. It is preferred when all the requirements are already known and quality of the end product is required. There‚Äôs no short-term time frame to complete the task at hand, the software is usually created in one single go.&lt;br /&gt;
&lt;img src=&quot;/assets/images/waterfall-768x820.png&quot; alt=&quot;Waterfall model&quot; style=&quot;max-width: 512px;&quot; /&gt;&lt;br /&gt;
Source: Self-created&lt;/p&gt;

&lt;h2 id=&quot;2-agile-methodology&quot;&gt;2. Agile methodology&lt;/h2&gt;

&lt;p&gt;This model is an iterative approach to all the steps involved in SDLC. One of the most common types of agile craftsmanship is ‚ÄòSCRUM‚Äô. It‚Äôs done in ‚ÄòSprints‚Äô. It is preferred when speed is required in developing the software/product. First, a story(one planned sprint) is pulled from the Product Backlog. A sprint usually lasts up to 2, 3 or 4 weeks. It first moves to Sprint Backlog where meetups are held, the sprint is here planned with the team and the scrum master. Also if there is any previous retrospection needed to be done then it also discussed beforehand. In the meetup, demos/reviews are done for each of the individual developers, they‚Äôve to tell the team what they‚Äôve done till now, what are the future plans and what hindrances they might be facing. During this whole sprint, the scrum master checks the flow in three phases viz. InDev, Ready for QA (Quality Assurance) and InQA, and if it passes all the phases then the scrum master marks the sprint as done or DOD (definition of done). During QA check, the steps involved in SDLC are verified, tests are run and should pass. There can also be certain specifications¬†like a minimum percentage of tests, automation requirements, etc that might need to fulfil for getting DOD.&lt;/p&gt;

&lt;h3 id=&quot;comparison&quot;&gt;Comparison:&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Flow:&lt;/strong&gt; The waterfall is a linear sequential flow of steps in SDLC, whereas agile development goes through the steps iteratively in short cycles.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Interaction:&lt;/strong&gt; The waterfall has varied interaction with the client, i.e. High during requirement analysis and user acceptance, whereas agile development has constant Business interaction with clients as the cycles(sprints) are short.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Head of operations:&lt;/strong&gt; In waterfall, there is an overall Product Manager, whereas, in agile development (SCRUM), there is a scrum master.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Falling back:&lt;/strong&gt; In the waterfall model, one cannot fall back until a stage completed, whereas, in agile development, one can fall back at any instant of time because time span is usually short.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Requirement changes:&lt;/strong&gt; In waterfall, requirement changes are not possible without raising a change request which will re-initiate the whole process, whereas, in agile development, the new feature request can be shifted to next sprint, if it is not feasible in the current sprint.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Speed:&lt;/strong&gt; The pace of development is comparatively faster in agile development than to waterfall. Also due to lack of speed in the waterfall model, the technologies may go obsolete by the time the software is delivered.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While the debate may go on forever that which model is better, I believe that it depends upon the requirements of the individual, both models have their pros and cons. One must choose wisely! I hope this was an informative article for you. This was all that I had to talk about today. Since I‚Äôm very new to the topic, I might have missed something or made mistakes. Do suggest/correct me if you found something.&lt;/p&gt;</content><author><name>ajatprabha</name></author><category term="sdlc" /><category term="agile development" /><category term="waterfall" /><summary type="html">I was always curious to know, how a professional business software is developed from start to finish. Unlike what we do during our study of software designing or developing a hobby project, we don‚Äôt take the steps involved in making a professional software that seriously! But when you‚Äôre out there in the real world you can‚Äôt afford to mess things up due to the lack of a streamlined workflow. So while searching for a tested methodology for software¬†development, I came across something called SDLC aka ‚ÄòSoftware Development Life Cycle‚Äô. It essentially used to describe the various processes involved in the development of a software viz.</summary></entry></feed>